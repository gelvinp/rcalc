import sys

Import("env")

common_sources = [
    "upstream/src/context.c",
    "upstream/src/init.c",
    "upstream/src/input.c",
    "upstream/src/monitor.c",
    "upstream/src/vulkan.c",
    "upstream/src/window.c"
]


if env["builtin_glfw"]:
    env_glfw = env.Clone()
    if "-Werror" in env_glfw["CCFLAGS"]:
        env_glfw["CCFLAGS"].remove("-Werror")
    
    env_glfw.Append(CCFLAGS=["-std=c99"])

    env_glfw.add_source_files(env.modules_sources, common_sources)

    if env["platform"] == "linux":
        env_glfw.add_source_files(env.modules_sources, [
            "upstream/src/linux_joystick.c"
        ])

        if env["windowing"] == "x11":
            env_glfw.add_source_files(env.modules_sources, [
                "upstream/src/x11_init.c",
                "upstream/src/x11_monitor.c",
                "upstream/src/x11_window.c",
                "upstream/src/xkb_unicode.c",
                "upstream/src/posix_time.c",
                "upstream/src/posix_thread.c",
            ])
            env_glfw.Append(CPPDEFINES=["_GLFW_X11"])
        else:
            print(f"Windowing '{env['windowing']}' is not implemented for GLFW module!")
            sys.exit(255)
    elif env["platform"] == "macos":
        env_glfw.add_source_files(env.modules_sources, [
            "upstream/src/cocoa_init.m",
            "upstream/src/cocoa_joystick.m",
            "upstream/src/cocoa_monitor.m",
            "upstream/src/cocoa_window.m",
            "upstream/src/nsgl_context.m",
            "upstream/src/cocoa_time.c",
            "upstream/src/posix_thread.c",
            "upstream/src/egl_context.c",
            "upstream/src/osmesa_context.c"
        ])

        env_glfw.Append(CPPDEFINES=["_GLFW_COCOA"])